// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/contracts.go

// Package mock_repo is a generated GoMock package.
package repo

import (
	context "context"
	entity "evrone_go_hw_5_1/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockUserRepository) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserRepositoryMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteByID), ctx, id)
}

// FindAll mocks base method.
func (m *MockUserRepository) FindAll(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockUserRepository) FindByID(ctx context.Context, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepository)(nil).FindByID), ctx, id)
}

// Save mocks base method.
func (m *MockUserRepository) Save(ctx context.Context, user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), ctx, user)
}

// MockUserCacheRepository is a mock of UserCacheRepository interface.
type MockUserCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheRepositoryMockRecorder
}

// MockUserCacheRepositoryMockRecorder is the mock recorder for MockUserCacheRepository.
type MockUserCacheRepositoryMockRecorder struct {
	mock *MockUserCacheRepository
}

// NewMockUserCacheRepository creates a new mock instance.
func NewMockUserCacheRepository(ctrl *gomock.Controller) *MockUserCacheRepository {
	mock := &MockUserCacheRepository{ctrl: ctrl}
	mock.recorder = &MockUserCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCacheRepository) EXPECT() *MockUserCacheRepositoryMockRecorder {
	return m.recorder
}

// FetchAllUsersFromCache mocks base method.
func (m *MockUserCacheRepository) FetchAllUsersFromCache(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllUsersFromCache", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllUsersFromCache indicates an expected call of FetchAllUsersFromCache.
func (mr *MockUserCacheRepositoryMockRecorder) FetchAllUsersFromCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllUsersFromCache", reflect.TypeOf((*MockUserCacheRepository)(nil).FetchAllUsersFromCache), ctx)
}

// FetchUserFromCache mocks base method.
func (m *MockUserCacheRepository) FetchUserFromCache(ctx context.Context, id string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserFromCache", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserFromCache indicates an expected call of FetchUserFromCache.
func (mr *MockUserCacheRepositoryMockRecorder) FetchUserFromCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserFromCache", reflect.TypeOf((*MockUserCacheRepository)(nil).FetchUserFromCache), ctx, id)
}

// InvalidateAllUsersCache mocks base method.
func (m *MockUserCacheRepository) InvalidateAllUsersCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateAllUsersCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateAllUsersCache indicates an expected call of InvalidateAllUsersCache.
func (mr *MockUserCacheRepositoryMockRecorder) InvalidateAllUsersCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAllUsersCache", reflect.TypeOf((*MockUserCacheRepository)(nil).InvalidateAllUsersCache), ctx)
}

// InvalidateUserInCache mocks base method.
func (m *MockUserCacheRepository) InvalidateUserInCache(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserInCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserInCache indicates an expected call of InvalidateUserInCache.
func (mr *MockUserCacheRepositoryMockRecorder) InvalidateUserInCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserInCache", reflect.TypeOf((*MockUserCacheRepository)(nil).InvalidateUserInCache), ctx, id)
}

// SaveAllUsersToCache mocks base method.
func (m *MockUserCacheRepository) SaveAllUsersToCache(ctx context.Context, user []entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAllUsersToCache", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAllUsersToCache indicates an expected call of SaveAllUsersToCache.
func (mr *MockUserCacheRepositoryMockRecorder) SaveAllUsersToCache(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAllUsersToCache", reflect.TypeOf((*MockUserCacheRepository)(nil).SaveAllUsersToCache), ctx, user)
}

// SaveUserToCache mocks base method.
func (m *MockUserCacheRepository) SaveUserToCache(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserToCache", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserToCache indicates an expected call of SaveUserToCache.
func (mr *MockUserCacheRepositoryMockRecorder) SaveUserToCache(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserToCache", reflect.TypeOf((*MockUserCacheRepository)(nil).SaveUserToCache), ctx, user)
}

// MockMethodCalledNotifier is a mock of MethodCalledNotifier interface.
type MockMethodCalledNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockMethodCalledNotifierMockRecorder
}

// MockMethodCalledNotifierMockRecorder is the mock recorder for MockMethodCalledNotifier.
type MockMethodCalledNotifierMockRecorder struct {
	mock *MockMethodCalledNotifier
}

// NewMockMethodCalledNotifier creates a new mock instance.
func NewMockMethodCalledNotifier(ctrl *gomock.Controller) *MockMethodCalledNotifier {
	mock := &MockMethodCalledNotifier{ctrl: ctrl}
	mock.recorder = &MockMethodCalledNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMethodCalledNotifier) EXPECT() *MockMethodCalledNotifierMockRecorder {
	return m.recorder
}

// NotifyMethodCalled mocks base method.
func (m *MockMethodCalledNotifier) NotifyMethodCalled(methodName string, params map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMethodCalled", methodName, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMethodCalled indicates an expected call of NotifyMethodCalled.
func (mr *MockMethodCalledNotifierMockRecorder) NotifyMethodCalled(methodName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMethodCalled", reflect.TypeOf((*MockMethodCalledNotifier)(nil).NotifyMethodCalled), methodName, params)
}
